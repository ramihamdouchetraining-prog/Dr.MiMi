name: üóÑÔ∏è Neon Branch Management

on:
  pull_request:
    types:
      - opened
      - reopened
      - synchronize
      - closed

concurrency:
  group: neon-${{ github.event.pull_request.number }}
  cancel-in-progress: false

jobs:
  setup:
    name: üìã Setup
    outputs:
      branch: ${{ steps.branch_name.outputs.current_branch }}
      pr_number: ${{ github.event.pull_request.number }}
    runs-on: ubuntu-latest
    steps:
      - name: üè∑Ô∏è Get branch name
        id: branch_name
        uses: tj-actions/branch-names@v8

      - name: üìù Log PR info
        run: |
          echo "PR Number: ${{ github.event.pull_request.number }}"
          echo "Branch: ${{ steps.branch_name.outputs.current_branch }}"
          echo "Action: ${{ github.event.action }}"

  create_neon_branch:
    name: üå± Create Neon Database Branch
    outputs:
      db_url: ${{ steps.create_neon_branch.outputs.db_url }}
      db_url_with_pooler: ${{ steps.create_neon_branch.outputs.db_url_with_pooler }}
      host: ${{ steps.create_neon_branch.outputs.host }}
      branch_id: ${{ steps.create_neon_branch.outputs.branch_id }}
    needs: setup
    if: |
      github.event_name == 'pull_request' && (
      github.event.action == 'synchronize'
      || github.event.action == 'opened'
      || github.event.action == 'reopened')
    runs-on: ubuntu-latest
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: üìÖ Set branch expiration (2 weeks)
        id: get_expiration_date
        run: echo "EXPIRES_AT=$(date -u --date '+14 days' +'%Y-%m-%dT%H:%M:%SZ')" >> "$GITHUB_ENV"

      - name: üå± Create Neon Branch
        id: create_neon_branch
        uses: neondatabase/create-branch-action@v6
        with:
          project_id: ${{ vars.NEON_PROJECT_ID }}
          branch_name: preview/pr-${{ needs.setup.outputs.pr_number }}-${{ needs.setup.outputs.branch }}
          api_key: ${{ secrets.NEON_API_KEY }}
          expires_at: ${{ env.EXPIRES_AT }}

      - name: üì¶ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: üìö Install dependencies
        run: npm ci

      - name: üîÑ Run Database Migrations
        run: npm run db:push
        env:
          DATABASE_URL: "${{ steps.create_neon_branch.outputs.db_url_with_pooler }}"

      - name: üåæ Seed Database (optional)
        run: |
          echo "Seeding preview database..."
          # Uncomment if you have a seed script
          # npm run db:seed
        env:
          DATABASE_URL: "${{ steps.create_neon_branch.outputs.db_url_with_pooler }}"
        continue-on-error: true

      - name: üí¨ Comment on PR with database info
        uses: actions/github-script@v7
        with:
          script: |
            const branchName = 'preview/pr-${{ needs.setup.outputs.pr_number }}-${{ needs.setup.outputs.branch }}';
            const host = '${{ steps.create_neon_branch.outputs.host }}';
            const branchId = '${{ steps.create_neon_branch.outputs.branch_id }}';
            const expiresAt = '${{ env.EXPIRES_AT }}';

            // Find existing comment
            const comments = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });

            const botComment = comments.data.find(comment => 
              comment.user.type === 'Bot' && 
              comment.body.includes('üóÑÔ∏è Neon Database Branch')
            );

            const commentBody = `## üóÑÔ∏è Neon Database Branch Created!

‚úÖ A preview database has been created for this PR.

### üìä Database Details:
- **Branch Name:** \`${branchName}\`
- **Host:** \`${host}\`
- **Branch ID:** \`${branchId}\`
- **Expires:** ${new Date(expiresAt).toLocaleDateString('fr-FR', { 
              year: 'numeric', 
              month: 'long', 
              day: 'numeric',
              hour: '2-digit',
              minute: '2-digit'
            })}

### üîê Access Database Credentials:

**For repository maintainers only:**
1. Go to the [Actions tab](${context.payload.repository.html_url}/actions/runs/${context.runId})
2. Navigate to the \`Create Neon Database Branch\` job
3. Expand the \`Create Neon Branch\` step to view connection details

**For preview deployments:**
- Set the \`DATABASE_URL\` environment variable in your deployment platform
- Use GitHub Actions secrets to pass credentials securely

### ‚ö° Status:
- üèóÔ∏è Database schema migrated ‚úì
- üåæ Database ready for use ‚úì
- üîÑ Auto-updates on new commits ‚úì
- üóëÔ∏è Auto-deletes when PR closes ‚úì

### üîí Security:
Database credentials are stored securely in GitHub Actions outputs and are not exposed in PR comments.

---
*This database branch will be automatically deleted when the PR is closed or after 14 days.*`;

            if (botComment) {
              // Update existing comment
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: commentBody
              });
            } else {
              // Create new comment
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: commentBody
              });
            }

      - name: ‚úÖ Database setup complete
        run: |
          echo "‚úÖ Neon branch created successfully!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Branch:** preview/pr-${{ needs.setup.outputs.pr_number }}-${{ needs.setup.outputs.branch }}" >> $GITHUB_STEP_SUMMARY
          echo "**Host:** ${{ steps.create_neon_branch.outputs.host }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "üîê Database credentials are available in the job outputs (maintainers only)" >> $GITHUB_STEP_SUMMARY

  delete_neon_branch:
    name: üóëÔ∏è Delete Neon Database Branch
    needs: setup
    if: github.event_name == 'pull_request' && github.event.action == 'closed'
    runs-on: ubuntu-latest
    steps:
      - name: üóëÔ∏è Delete Neon Branch
        uses: neondatabase/delete-branch-action@v3
        with:
          project_id: ${{ vars.NEON_PROJECT_ID }}
          branch: preview/pr-${{ needs.setup.outputs.pr_number }}-${{ needs.setup.outputs.branch }}
          api_key: ${{ secrets.NEON_API_KEY }}

      - name: üí¨ Comment on PR about deletion
        uses: actions/github-script@v7
        with:
          script: |
            const branchName = 'preview/pr-${{ needs.setup.outputs.pr_number }}-${{ needs.setup.outputs.branch }}';
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: `## üóëÔ∏è Neon Database Branch Deleted

The preview database branch \`${branchName}\` has been successfully deleted.

‚úÖ Resources cleaned up
üîí Data removed securely

Thank you for your contribution! üéâ`
            });

      - name: ‚úÖ Cleanup complete
        run: |
          echo "‚úÖ Neon branch deleted successfully!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Branch:** preview/pr-${{ needs.setup.outputs.pr_number }}-${{ needs.setup.outputs.branch }}" >> $GITHUB_STEP_SUMMARY
          echo "**Status:** Deleted" >> $GITHUB_STEP_SUMMARY

  handle_errors:
    name: ‚ö†Ô∏è Handle Errors
    runs-on: ubuntu-latest
    needs: [create_neon_branch]
    if: failure()
    steps:
      - name: üí¨ Comment on PR about error
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: `## ‚ö†Ô∏è Database Branch Creation Failed

There was an error creating the Neon database branch for this PR.

### üîç Common Issues:
- Check if \`NEON_API_KEY\` secret is properly configured
- Check if \`NEON_PROJECT_ID\` variable is properly configured
- Verify that the Neon project has available resources
- Check the [Actions logs](${context.payload.repository.html_url}/actions/runs/${context.runId}) for details

### üõ†Ô∏è Next Steps:
1. Review the error logs
2. Fix the configuration
3. Re-run the workflow

*You can manually re-run this workflow from the Actions tab.*`
            });
